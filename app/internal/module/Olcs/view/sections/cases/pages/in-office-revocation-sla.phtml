<?php

/** @var array $revoke */

use Common\RefData;

$items = [
    [
        'label' => 'Submission required for approval of ptr',
        'value' => $revoke['isSubmissionRequiredForApproval'] === null
            ? null
            : ($revoke['isSubmissionRequiredForApproval'] ? 'Y' : 'N'),
    ],
];

if ($revoke['isSubmissionRequiredForApproval']) {
    $items = array_merge(
        $items,
        [
            $this->slaIndicator()->generateDateItem('Date approval submission issued', $revoke, 'approvalSubmissionIssuedDate'),
            $this->slaIndicator()->generateDateItem('Date approval submission returned', $revoke, 'approvalSubmissionReturnedDate'),
            [
                'label' => 'Approval submission TC/TDC',
                'value' => $revoke['approvalSubmissionPresidingTc']
                    ? $revoke['approvalSubmissionPresidingTc']['name']
                    : null
            ],
        ]
    );
}

$items = array_merge(
    $items,
    [
        $this->slaIndicator()->generateDateItem('Date IOR letter issued', $revoke, 'iorLetterIssuedDate'),
        $this->slaIndicator()->generateDateItem('Date Operator\'s response due', $revoke, 'operatorResponseDueDate'),
        $this->slaIndicator()->generateDateItem('Date Response Received', $revoke, 'operatorResponseReceivedDate'),

        [
            'label' => 'Is submission required for action',
            'value' => $revoke['isSubmissionRequiredForAction'] === null
                ? null
                : ($revoke['isSubmissionRequiredForAction'] ? 'Y' : 'N'),
        ],
    ]
);

if ($revoke['isSubmissionRequiredForAction']) {
    $items = array_merge(
        $items,
        [
            $this->slaIndicator()->generateDateItem('Date final submission issued', $revoke, 'finalSubmissionIssuedDate'),
            $this->slaIndicator()->generateDateItem('Date final submission returned', $revoke, 'finalSubmissionReturnedDate'),
            [
                'label' => 'Final submission TC/DTC',
                'value' => $revoke['finalSubmissionPresidingTc']
                    ? $revoke['finalSubmissionPresidingTc']['name']
                    : null,
            ],
        ]
    );
}

$items[] = [
    'label' => 'Action to be taken',
    'value' => $revoke['actionToBeTaken']
        ? $revoke['actionToBeTaken']['description']
        : null,
];

if ($revoke['actionToBeTaken']) {
    switch ($revoke['actionToBeTaken']['id']) {
        case RefData::PTR_ACTION_TO_BE_TAKEN_REVOKE:
            $items[] = $this->slaIndicator()->generateDateItem('Revocation letter issued date', $revoke, 'revocationLetterIssuedDate');
            break;
        case RefData::PTR_ACTION_TO_BE_TAKEN_NFA:
            $items[] = $this->slaIndicator()->generateDateItem('NFA letter issued date', $revoke, 'nfaLetterIssuedDate');
            break;
        case RefData::PTR_ACTION_TO_BE_TAKEN_WARNING:
            $items[] = $this->slaIndicator()->generateDateItem('Warning letter issued date', $revoke, 'warningLetterIssuedDate');
            break;
        case RefData::PTR_ACTION_TO_BE_TAKEN_PI:
            $items[] = $this->slaIndicator()->generateDateItem('PI Agreed', $revoke, 'piAgreedDate');
            break;
        case RefData::PTR_ACTION_TO_BE_TAKEN_OTHER:
            $items[] = $this->slaIndicator()->generateDateItem('Other Action agreed', $revoke, 'otherActionAgreedDate');
            break;
    };
}

$actions = [
    [
        'label' => 'Edit',
        'url' => $this->url(
            'processing_in_office_revocation_sla',
            ['action' => 'edit'],
            [],
            true
        ),
        'class' => 'action--secondary js-modal-ajax'
    ],
];
echo $this->render(
    'partials/read-only/main',
    [
        'header' => 'Service level agreement',
        'actions' => $actions,
        'items' => $items
    ]
);
